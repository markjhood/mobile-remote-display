(*
 * This script is the glue that binds remote-jblend.app and the proximity
 * launcher together for the MIDP3 Remote Display Demo.  It offers to
 * establish an ad-hoc WiFi network, obtains the Bluetooth Mac and IP
 * addresses of the phone, and sets up the bluetooth proximity app to start
 * and kill the remote display.
 *)

set wepkey to "1301130113"

(*
 * cachedir is where'll we'll copy the scripts needed by Proximity.app.
 *)
set cachedir to "$HOME/Library/Application\\ Support/RemoteDisplay"
do shell script "mkdir -p " & cachedir

set scriptdir to quoted form of the POSIX path of ((path to me as text) & "Contents:Resources:Scripts:")

do shell script "cp -f " & scriptdir & "start-remote.scpt " & cachedir
do shell script "cp -f " & scriptdir & "kill-remote.scpt " & cachedir

(*
 * remote-jblend didn't used to have a quit handler, and Proximity.app doesn't
 * reliably respond to quit events, so resorted to shell commands to terminate
 * these apps.
 *)
on killApp(appName)
  -- Have to set COMMAND_MODE=unix2003 to get ps -ef to work
  do shell script "export COMMAND_MODE=unix2003; ps -ef | grep " & appName & " | grep -v grep | awk '{print $2}' | xargs kill -TERM"
end killApp

(*
 * Make sure the demo is not running.
 *)
killApp("remote-jblend")
killApp("Proximity")

(*
 * Ensure support for assistive devices is enabled so we can do GUI scripting.
 *)
tell application "System Events"
  set UI_enabled to UI elements enabled
end tell
if UI_enabled is false then
  tell application "System Preferences"
    activate
    set current pane to pane id "com.apple.preference.universalaccess"
    display dialog "This demo utilizes the built-in Graphic User Interface Scripting architecture of Mac OS X which is currently disabled." & return & return & "Activate GUI Scripting by pressing Cancel and then selecting the checkbox \"Enable access for assistive devices\" in the Universal Access preference pane. Then re-run the demo." with icon 1 buttons {"Cancel"} default button 1
  end tell
end if

(*
 * Get the current demo mode.
 *   1) small dashboard with proximity detection
 *   2) large dashboard with proximity detection
 *   3) presentation viewer
 *)
try
  set demoMode to do shell script "defaults read com.aplix.RemoteDisplay demoMode"
on error
  set demoMode to "1"
end try

(*
 * Get the current IP address of the phone.
 *)
try
  set ipaddr to do shell script "defaults read com.aplix.RemoteDisplay ipaddr"
on error
  set ipaddr to ""
end try

(*
 * Get the current Bluetooth address of the phone.
 *)
try
  set btaddr to do shell script "defaults read com.aplix.RemoteDisplay btaddr"
on error
  set btaddr to ""
end try

(*
 * Confirm current demo mode or obtain a new one.
 *)
display dialog "Choose demo mode:" buttons {"Small Dashboard", "Large Dashboard", "Presentation"} default button round demoMode
set demoMode to button returned of the result
if demoMode is "Small Dashboard" then
  set demoMode to "1"
else if demoMode is "Large Dashboard" then
  set demoMode to "2"
else
  set demoMode to "3"
end if

(*
 * Ask if we should try to set up an ad-hoc WiFi network.
 *)
display dialog "Use an ad-hoc WiFi network?" buttons {"Cancel", "Yes", "No"} default button 3
set useAdhoc to button returned of the result
  
if useAdhoc is "Yes" then
  (*
   * Use the computer name for the ad-hoc network name.  If it's more than 30
   * characters the GUI scripting gets confused, so truncate it.
   *)
  set networkExists to false
  set networkName to computer name of (system info)
  if (count of characters in networkName) > 30 then
    set networkName to characters 1 thru 30 of networkName as string
  end if
  
  (*
   * Check for for existing ad-hoc mode.  Note that grep will return an error
   * status of 1 if it doesn't find a match, so we have to use a try/on error
   * block.
   *)
  try
    set adhocExists to do shell script "/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep -c IBSS"
  on error
    set adhocExists to "0"
  end try
  
  (*
   * Turn on Airport if necessary and set up ad-hoc WiFi.  This is done through
   * GUI scripting and is probably fairly fragile.  Apparently "airport -i" used
   * to allow setting up a network in IBSS mode (ad-hoc), but that option no
   * longer seems to be available, so we have to script through the GUI.
   * 
   * Check if the ad-hoc network already exists even if we know we're in managed
   * mode and possibly associated with an access point already.  This happens if
   * we set up an ad-hoc network previously but then went into managed mode
   * while the phone was still associated with the Mac; normally, the ad-hoc
   * network is removed when going into managed mode or turning off Airport.  If
   * we try to create a network that already exists then it becomes difficult to
   * recover.
   *)
  if adhocExists is "0" then
    tell application "System Events"
      tell process "SystemUIServer"
        tell menu bar 1
          -- Find Airport Menu.
          set menu_extras to value of attribute "AXDescription" of menu bar items
          repeat with the_menu from 1 to the count of menu_extras
            if item the_menu of menu_extras is "Airport Menu Extra" then exit repeat
          end repeat
          
          tell menu bar item the_menu
            perform action "AXPress"
            -- If Airport is off, turn it on.
            if title of menu item 2 of menu 1 is "Turn Airport On" then
              perform action "AXPress" of menu item "Turn Airport On" of menu 1
              perform action "AXPress"
            end if
            
            -- Check if an ad-hoc network already exists in the list.
            repeat with network_item from 3 to the count of menu item of menu 1
              if title of menu item network_item of menu 1 is networkName then
                set networkExists to true
                exit repeat
              end if
            end repeat
            if networkExists is true then
              -- Originally dismissed the wifi menu since it doesn't fully
              -- update to show the new association, but for some reason
              -- reassociation happens much faster if it stays up.
              -- perform action "AXPress"
            else
              -- Bring up the Create Network... dialog.
              perform action "AXPress" of menu item "Create Network…" of menu 1
            end if
          end tell
        end tell
        
        if networkExists is true then
          -- Reasssociate with the existing ad-hoc network.
          display dialog "The demo needs to re-associate with the existing ad-hoc network \"" & networkName & "\" but needs administrator privileges to do so.  Press Continue to enter your password or Cancel instead." buttons {"Cancel", "Continue"} default button 2
          
          do shell script "/usr/sbin/networksetup -setairportnetwork AirPort " & networkName & " " & wepkey with administrator privileges
        else
          -- Enter information into Create Network Dialog
          tell window 1
            -- Require Password
            click checkbox 1
            
            -- Fill in information
            set value of text field 2 to wepkey
            set value of text field 3 to wepkey
            
            -- Set name last so OK button will be enabled
            set value of text field 1 to networkName
            
            -- Click OK
            click button 1
          end tell
        end if
      end tell
    end tell
  end if
end if
  
(*
 * Confirm IP address or obtain a new one.
 *)
if useAdhoc is "Yes" then
  display dialog "Airport is in now in ad-hoc WiFi mode." & return & return & "Network name: " & networkName & return & "Encryption: 40-bit WEP" & return & "password:  " & wepkey & return & return & "Ensure that the phone is connected to network \"" & networkName & "\" and enter or confirm the phone's IP address here.  The phone's IP address for ad-hoc networks is link-local (169.254.xxx.yyy)." & return & return & "If you have problems connecting, try removing any current network information from the phone and re-entering the above network information.  Turning off all Bluetooth devices can help as well." & return & return & "Otherwise, connect to a managed WiFi access point." default answer ipaddr buttons {"Cancel", "Continue"} default button 2
else
  display dialog "Enter or confirm the phone's IP address here." default answer ipaddr buttons {"Cancel", "Continue"} default button 2
end if
set ipaddr to text returned of the result

if demoMode is "1" or demoMode is "2" then
  (*
   * Confirm bluetooth address or obtain a new one.
   *)
  display dialog "Enter or confirm the Bluetooth hardware address of the phone. Use a format like this:" & return & return & "00-11-22-33-44-55" default answer btaddr buttons {"Cancel", "Continue"} default button 2
  set btaddr to text returned of the result
  do shell script "defaults write com.aplix.RemoteDisplay btaddr " & btaddr

  (*
   * Set up Proximity.app.  The app has been hacked to accept the Bluetooth
   * device address directly and to allow setting of the page timeout.  There
   * are 1600 slots in 1 second; the default is 8192 (5.12 seconds), so here
   * we set the timeout to a little longer than 1 second to make the proximity
   * detection less sensitive.
   *)
  do shell script "defaults write com.reduxcomputing.Proximity deviceAddress " & btaddr
  do shell script "defaults write com.reduxcomputing.Proximity pageTimeoutSlots 1700"
  do shell script "defaults write com.reduxcomputing.Proximity timerInterval 2"
  do shell script "defaults write com.reduxcomputing.Proximity inRangeScriptPath " & cachedir & "/start-remote.scpt"
  do shell script "defaults write com.reduxcomputing.Proximity outOfRangeScriptPath " & cachedir & "/kill-remote.scpt"
  
  (*
   * Ask if we should run Proximity.app.
   *)
  display dialog "Do you want to run Proximity.app to start the demo now?" & return & return & "If the phone is not powered on with Bluetooth enabled then Proximity.app will become unresponsive, so make sure the phone is ready." & return & return & "If the phone is ready and in range then Proximity.app will launch the remote display a few seconds after selecting \"Yes.\"" buttons {"Cancel", "No", "Yes"} default button 3
  set runProximity to button returned of the result
else
  set runProximity to "No"  
end if

(*
 * Set up remote-jblend.app.  Note that we don't set the bg (background)
 * arg to 1, so the remote display does NOT fork into the background.  The
 * fork() is necessary in order to keep BlueProximity on Linux from blocking,
 * but Proximity.app on Mac doesn't need it and in fact it provokes bugs that
 * cause the remote display to launch with two instances in some cases.  
 *)
do shell script "defaults write com.aplix.RemoteDisplay demoMode " & demoMode
do shell script "defaults write com.aplix.RemoteDisplay ipaddr " & ipaddr
do shell script "defaults write com.aplix.RemoteDisplay port 9999"

if runProximity is "Yes" then
  tell application "Proximity" to run
else
  display dialog "Do you want to run the remote display to start the demo now?" buttons {"Cancel", "No", "Yes"} default button 3
  set runDemo to button returned of the result
  if runDemo is "Yes" then
    tell application "remote-jblend" to activate
  end if
end if
